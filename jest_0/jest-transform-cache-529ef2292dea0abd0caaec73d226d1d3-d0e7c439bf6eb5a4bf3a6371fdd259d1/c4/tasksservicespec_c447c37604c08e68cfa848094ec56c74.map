{"file":"/home/dmytropoliuliuk/Documents/myGitPrs/nestjs_app/nestjs/src/tasks/tasks-service.spec.ts","mappings":"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","names":[],"sources":["/home/dmytropoliuliuk/Documents/myGitPrs/nestjs_app/nestjs/src/tasks/tasks-service.spec.ts"],"sourcesContent":["import { Test } from '@nestjs/testing';\nimport { TasksService } from './tasks.service';\nimport { TaskRepository } from './task.repository';\nimport { GetTetaskFilterDto } from './dto/get-tasks-filter.dto';\nimport { TaskStatus } from './task-status.enum';\nimport { NotFoundException } from '@nestjs/common';\n\nconst mockUser = { id: 12, username: 'Test user' };\n\nconst mockTaskRepository = () => ({\n  getTasks: jest.fn(),\n  findOne: jest.fn(),\n  createTask: jest.fn(),\n  delete: jest.fn(),\n});\n\ndescribe('TaskService', () => {\n  let tasksService;\n  let taskRepository;\n\n  beforeEach(async () => {\n    const module = await Test.createTestingModule({\n      providers: [\n        TasksService,\n        { provide: TaskRepository, useFactory: mockTaskRepository },\n      ],\n    }).compile();\n\n    tasksService = await module.get<TasksService>(TasksService);\n    taskRepository = await module.get<TaskRepository>(TaskRepository);\n  });\n\n  describe('getTasks', () => {\n    it('gets all task from the repository', async () => {\n\n      taskRepository.getTasks.mockResolvedValue('someValue');\n\n      expect(taskRepository.getTasks).not.toHaveBeenCalled();\n      const filters: GetTetaskFilterDto = { status: TaskStatus.IN_PROGRESS, search: 'Some search query' };\n      const result = await tasksService.getTasks(filters, mockUser);\n      expect(taskRepository.getTasks).toHaveBeenCalled();\n      expect(result).toEqual('someValue');\n    });\n  });\n\n  describe('getTaskById', () => {\n    it('calls taskRepository.findOne() and successfully retrieve and return the task', async () => {\n\n      const mockTask = { title: 'Test title', description: 'Test desc' };\n      taskRepository.findOne.mockResolvedValue(mockTask);\n\n      const result = await tasksService.getTaskById(1, mockUser);\n      expect(result).toEqual(mockTask);\n\n      expect(taskRepository.findOne).toHaveBeenCalledWith({\n        where: {\n          id: 1,\n          userId: mockUser.id,\n         },\n      });\n    });\n\n    it('throws an error as task is not found', async () => {\n      taskRepository.findOne.mockResolvedValue(null);\n      expect(tasksService.getTaskById(1, mockUser)).rejects.toThrow(NotFoundException);\n    });\n\n  });\n\n  describe('createTask', () => {\n    it('calls taskRepository.create() and returns the task', async () => {\n      taskRepository.createTask.mockResolvedValue('someTask');\n      expect(taskRepository.createTask).not.toHaveBeenCalled();\n      const createTaskDto = { title: 'Test title', description: 'Test desc' };\n      const result = await tasksService.createTask(createTaskDto, mockUser);\n      expect(taskRepository.createTask).toHaveBeenCalledWith(createTaskDto, mockUser);\n      expect(result).toEqual('someTask');\n    });\n  });\n\n  describe('deleteTask', () => {\n    it('calls taskRepository.deleteTask() to delete a task', async () => {\n      taskRepository.delete.mockResolvedValue({ affected: 1 });\n      expect(taskRepository.delete).not.toHaveBeenCalled();\n      await tasksService.deleteTask(1, mockUser);\n      expect(taskRepository.delete).toHaveBeenCalledWith({ id: 1, userId: mockUser.id });\n    });\n\n    it('throws an error as task could not be found', async () => {\n      taskRepository.delete.mockResolvedValue({ affected: 0 });\n      expect(tasksService.deleteTask(1, mockUser)).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('updateTaskStatus', () => {\n    it('update a task status', async () => {\n      const save = jest.fn().mockResolvedValue(true);\n\n      tasksService.getTaskById = jest.fn().mockResolvedValue({\n         status: TaskStatus.OPEN,\n         save,\n      });\n      expect(tasksService.getTaskById).not.toHaveBeenCalled();\n      const result = await tasksService.updateTaskStatus(1, TaskStatus.DONE, mockUser);\n      expect(tasksService.getTaskById).toHaveBeenCalled();\n      expect(save).toHaveBeenCalled();\n      expect(result.status).toEqual(TaskStatus.DONE);\n    });\n  });\n});\n"],"version":3}