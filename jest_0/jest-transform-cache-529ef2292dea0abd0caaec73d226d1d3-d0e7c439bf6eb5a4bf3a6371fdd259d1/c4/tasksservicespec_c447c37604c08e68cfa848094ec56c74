5507d5f07205f1ec0b21d4f0469526a3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const tasks_service_1 = require("./tasks.service");
const task_repository_1 = require("./task.repository");
const task_status_enum_1 = require("./task-status.enum");
const common_1 = require("@nestjs/common");
const mockUser = { id: 12, username: 'Test user' };
const mockTaskRepository = () => ({
    getTasks: jest.fn(),
    findOne: jest.fn(),
    createTask: jest.fn(),
    delete: jest.fn(),
});
describe('TaskService', () => {
    let tasksService;
    let taskRepository;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                tasks_service_1.TasksService,
                { provide: task_repository_1.TaskRepository, useFactory: mockTaskRepository },
            ],
        }).compile();
        tasksService = await module.get(tasks_service_1.TasksService);
        taskRepository = await module.get(task_repository_1.TaskRepository);
    });
    describe('getTasks', () => {
        it('gets all task from the repository', async () => {
            taskRepository.getTasks.mockResolvedValue('someValue');
            expect(taskRepository.getTasks).not.toHaveBeenCalled();
            const filters = { status: task_status_enum_1.TaskStatus.IN_PROGRESS, search: 'Some search query' };
            const result = await tasksService.getTasks(filters, mockUser);
            expect(taskRepository.getTasks).toHaveBeenCalled();
            expect(result).toEqual('someValue');
        });
    });
    describe('getTaskById', () => {
        it('calls taskRepository.findOne() and successfully retrieve and return the task', async () => {
            const mockTask = { title: 'Test title', description: 'Test desc' };
            taskRepository.findOne.mockResolvedValue(mockTask);
            const result = await tasksService.getTaskById(1, mockUser);
            expect(result).toEqual(mockTask);
            expect(taskRepository.findOne).toHaveBeenCalledWith({
                where: {
                    id: 1,
                    userId: mockUser.id,
                },
            });
        });
        it('throws an error as task is not found', async () => {
            taskRepository.findOne.mockResolvedValue(null);
            expect(tasksService.getTaskById(1, mockUser)).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('createTask', () => {
        it('calls taskRepository.create() and returns the task', async () => {
            taskRepository.createTask.mockResolvedValue('someTask');
            expect(taskRepository.createTask).not.toHaveBeenCalled();
            const createTaskDto = { title: 'Test title', description: 'Test desc' };
            const result = await tasksService.createTask(createTaskDto, mockUser);
            expect(taskRepository.createTask).toHaveBeenCalledWith(createTaskDto, mockUser);
            expect(result).toEqual('someTask');
        });
    });
    describe('deleteTask', () => {
        it('calls taskRepository.deleteTask() to delete a task', async () => {
            taskRepository.delete.mockResolvedValue({ affected: 1 });
            expect(taskRepository.delete).not.toHaveBeenCalled();
            await tasksService.deleteTask(1, mockUser);
            expect(taskRepository.delete).toHaveBeenCalledWith({ id: 1, userId: mockUser.id });
        });
        it('throws an error as task could not be found', async () => {
            taskRepository.delete.mockResolvedValue({ affected: 0 });
            expect(tasksService.deleteTask(1, mockUser)).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('updateTaskStatus', () => {
        it('update a task status', async () => {
            const save = jest.fn().mockResolvedValue(true);
            tasksService.getTaskById = jest.fn().mockResolvedValue({
                status: task_status_enum_1.TaskStatus.OPEN,
                save,
            });
            expect(tasksService.getTaskById).not.toHaveBeenCalled();
            const result = await tasksService.updateTaskStatus(1, task_status_enum_1.TaskStatus.DONE, mockUser);
            expect(tasksService.getTaskById).toHaveBeenCalled();
            expect(save).toHaveBeenCalled();
            expect(result.status).toEqual(task_status_enum_1.TaskStatus.DONE);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvZG15dHJvcG9saXVsaXVrL0RvY3VtZW50cy9teUdpdFBycy9uZXN0anNfYXBwL25lc3Rqcy9zcmMvdGFza3MvdGFza3Mtc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXVDO0FBQ3ZDLG1EQUErQztBQUMvQyx1REFBbUQ7QUFFbkQseURBQWdEO0FBQ2hELDJDQUFtRDtBQUVuRCxNQUFNLFFBQVEsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDO0FBRW5ELE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNoQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNuQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNsQixVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNyQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtDQUNsQixDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtJQUMzQixJQUFJLFlBQVksQ0FBQztJQUNqQixJQUFJLGNBQWMsQ0FBQztJQUVuQixVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxjQUFJLENBQUMsbUJBQW1CLENBQUM7WUFDNUMsU0FBUyxFQUFFO2dCQUNULDRCQUFZO2dCQUNaLEVBQUUsT0FBTyxFQUFFLGdDQUFjLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFO2FBQzVEO1NBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWIsWUFBWSxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBZSw0QkFBWSxDQUFDLENBQUM7UUFDNUQsY0FBYyxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBaUIsZ0NBQWMsQ0FBQyxDQUFDO0lBQ3BFLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7UUFD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QUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLDZCQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2pGLE1BQU0sQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyw2QkFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9kbXl0cm9wb2xpdWxpdWsvRG9jdW1lbnRzL215R2l0UHJzL25lc3Rqc19hcHAvbmVzdGpzL3NyYy90YXNrcy90YXNrcy1zZXJ2aWNlLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XG5pbXBvcnQgeyBUYXNrc1NlcnZpY2UgfSBmcm9tICcuL3Rhc2tzLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGFza1JlcG9zaXRvcnkgfSBmcm9tICcuL3Rhc2sucmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBHZXRUZXRhc2tGaWx0ZXJEdG8gfSBmcm9tICcuL2R0by9nZXQtdGFza3MtZmlsdGVyLmR0byc7XG5pbXBvcnQgeyBUYXNrU3RhdHVzIH0gZnJvbSAnLi90YXNrLXN0YXR1cy5lbnVtJztcbmltcG9ydCB7IE5vdEZvdW5kRXhjZXB0aW9uIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuXG5jb25zdCBtb2NrVXNlciA9IHsgaWQ6IDEyLCB1c2VybmFtZTogJ1Rlc3QgdXNlcicgfTtcblxuY29uc3QgbW9ja1Rhc2tSZXBvc2l0b3J5ID0gKCkgPT4gKHtcbiAgZ2V0VGFza3M6IGplc3QuZm4oKSxcbiAgZmluZE9uZTogamVzdC5mbigpLFxuICBjcmVhdGVUYXNrOiBqZXN0LmZuKCksXG4gIGRlbGV0ZTogamVzdC5mbigpLFxufSk7XG5cbmRlc2NyaWJlKCdUYXNrU2VydmljZScsICgpID0+IHtcbiAgbGV0IHRhc2tzU2VydmljZTtcbiAgbGV0IHRhc2tSZXBvc2l0b3J5O1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgVGFza3NTZXJ2aWNlLFxuICAgICAgICB7IHByb3ZpZGU6IFRhc2tSZXBvc2l0b3J5LCB1c2VGYWN0b3J5OiBtb2NrVGFza1JlcG9zaXRvcnkgfSxcbiAgICAgIF0sXG4gICAgfSkuY29tcGlsZSgpO1xuXG4gICAgdGFza3NTZXJ2aWNlID0gYXdhaXQgbW9kdWxlLmdldDxUYXNrc1NlcnZpY2U+KFRhc2tzU2VydmljZSk7XG4gICAgdGFza1JlcG9zaXRvcnkgPSBhd2FpdCBtb2R1bGUuZ2V0PFRhc2tSZXBvc2l0b3J5PihUYXNrUmVwb3NpdG9yeSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRUYXNrcycsICgpID0+IHtcbiAgICBpdCgnZ2V0cyBhbGwgdGFzayBmcm9tIHRoZSByZXBvc2l0b3J5JywgYXN5bmMgKCkgPT4ge1xuXG4gICAgICB0YXNrUmVwb3NpdG9yeS5nZXRUYXNrcy5tb2NrUmVzb2x2ZWRWYWx1ZSgnc29tZVZhbHVlJyk7XG5cbiAgICAgIGV4cGVjdCh0YXNrUmVwb3NpdG9yeS5nZXRUYXNrcykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGNvbnN0IGZpbHRlcnM6IEdldFRldGFza0ZpbHRlckR0byA9IHsgc3RhdHVzOiBUYXNrU3RhdHVzLklOX1BST0dSRVNTLCBzZWFyY2g6ICdTb21lIHNlYXJjaCBxdWVyeScgfTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRhc2tzU2VydmljZS5nZXRUYXNrcyhmaWx0ZXJzLCBtb2NrVXNlcik7XG4gICAgICBleHBlY3QodGFza1JlcG9zaXRvcnkuZ2V0VGFza3MpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoJ3NvbWVWYWx1ZScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0VGFza0J5SWQnLCAoKSA9PiB7XG4gICAgaXQoJ2NhbGxzIHRhc2tSZXBvc2l0b3J5LmZpbmRPbmUoKSBhbmQgc3VjY2Vzc2Z1bGx5IHJldHJpZXZlIGFuZCByZXR1cm4gdGhlIHRhc2snLCBhc3luYyAoKSA9PiB7XG5cbiAgICAgIGNvbnN0IG1vY2tUYXNrID0geyB0aXRsZTogJ1Rlc3QgdGl0bGUnLCBkZXNjcmlwdGlvbjogJ1Rlc3QgZGVzYycgfTtcbiAgICAgIHRhc2tSZXBvc2l0b3J5LmZpbmRPbmUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Rhc2spO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0YXNrc1NlcnZpY2UuZ2V0VGFza0J5SWQoMSwgbW9ja1VzZXIpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrVGFzayk7XG5cbiAgICAgIGV4cGVjdCh0YXNrUmVwb3NpdG9yeS5maW5kT25lKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgdXNlcklkOiBtb2NrVXNlci5pZCxcbiAgICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCd0aHJvd3MgYW4gZXJyb3IgYXMgdGFzayBpcyBub3QgZm91bmQnLCBhc3luYyAoKSA9PiB7XG4gICAgICB0YXNrUmVwb3NpdG9yeS5maW5kT25lLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuICAgICAgZXhwZWN0KHRhc2tzU2VydmljZS5nZXRUYXNrQnlJZCgxLCBtb2NrVXNlcikpLnJlamVjdHMudG9UaHJvdyhOb3RGb3VuZEV4Y2VwdGlvbik7XG4gICAgfSk7XG5cbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NyZWF0ZVRhc2snLCAoKSA9PiB7XG4gICAgaXQoJ2NhbGxzIHRhc2tSZXBvc2l0b3J5LmNyZWF0ZSgpIGFuZCByZXR1cm5zIHRoZSB0YXNrJywgYXN5bmMgKCkgPT4ge1xuICAgICAgdGFza1JlcG9zaXRvcnkuY3JlYXRlVGFzay5tb2NrUmVzb2x2ZWRWYWx1ZSgnc29tZVRhc2snKTtcbiAgICAgIGV4cGVjdCh0YXNrUmVwb3NpdG9yeS5jcmVhdGVUYXNrKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgY29uc3QgY3JlYXRlVGFza0R0byA9IHsgdGl0bGU6ICdUZXN0IHRpdGxlJywgZGVzY3JpcHRpb246ICdUZXN0IGRlc2MnIH07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0YXNrc1NlcnZpY2UuY3JlYXRlVGFzayhjcmVhdGVUYXNrRHRvLCBtb2NrVXNlcik7XG4gICAgICBleHBlY3QodGFza1JlcG9zaXRvcnkuY3JlYXRlVGFzaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoY3JlYXRlVGFza0R0bywgbW9ja1VzZXIpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCgnc29tZVRhc2snKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2RlbGV0ZVRhc2snLCAoKSA9PiB7XG4gICAgaXQoJ2NhbGxzIHRhc2tSZXBvc2l0b3J5LmRlbGV0ZVRhc2soKSB0byBkZWxldGUgYSB0YXNrJywgYXN5bmMgKCkgPT4ge1xuICAgICAgdGFza1JlcG9zaXRvcnkuZGVsZXRlLm1vY2tSZXNvbHZlZFZhbHVlKHsgYWZmZWN0ZWQ6IDEgfSk7XG4gICAgICBleHBlY3QodGFza1JlcG9zaXRvcnkuZGVsZXRlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgYXdhaXQgdGFza3NTZXJ2aWNlLmRlbGV0ZVRhc2soMSwgbW9ja1VzZXIpO1xuICAgICAgZXhwZWN0KHRhc2tSZXBvc2l0b3J5LmRlbGV0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoeyBpZDogMSwgdXNlcklkOiBtb2NrVXNlci5pZCB9KTtcbiAgICB9KTtcblxuICAgIGl0KCd0aHJvd3MgYW4gZXJyb3IgYXMgdGFzayBjb3VsZCBub3QgYmUgZm91bmQnLCBhc3luYyAoKSA9PiB7XG4gICAgICB0YXNrUmVwb3NpdG9yeS5kZWxldGUubW9ja1Jlc29sdmVkVmFsdWUoeyBhZmZlY3RlZDogMCB9KTtcbiAgICAgIGV4cGVjdCh0YXNrc1NlcnZpY2UuZGVsZXRlVGFzaygxLCBtb2NrVXNlcikpLnJlamVjdHMudG9UaHJvdyhOb3RGb3VuZEV4Y2VwdGlvbik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd1cGRhdGVUYXNrU3RhdHVzJywgKCkgPT4ge1xuICAgIGl0KCd1cGRhdGUgYSB0YXNrIHN0YXR1cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHNhdmUgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSk7XG5cbiAgICAgIHRhc2tzU2VydmljZS5nZXRUYXNrQnlJZCA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgICBzdGF0dXM6IFRhc2tTdGF0dXMuT1BFTixcbiAgICAgICAgIHNhdmUsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdCh0YXNrc1NlcnZpY2UuZ2V0VGFza0J5SWQpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0YXNrc1NlcnZpY2UudXBkYXRlVGFza1N0YXR1cygxLCBUYXNrU3RhdHVzLkRPTkUsIG1vY2tVc2VyKTtcbiAgICAgIGV4cGVjdCh0YXNrc1NlcnZpY2UuZ2V0VGFza0J5SWQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChzYXZlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0LnN0YXR1cykudG9FcXVhbChUYXNrU3RhdHVzLkRPTkUpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9